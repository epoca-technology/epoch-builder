from typing import TypedDict, List, Union, Dict, Literal
from modules.types.arima_types import IArimaConfig
from modules.types.interpreter_types import IPercentChangeInterpreterConfig, IProbabilityInterpreterConfig, \
    IConsensusInterpreterConfig
from modules.types.keras_models_types import IKerasModelSummary








## Predictions ##





# Prediction Result
#  1 = Long
# -1 = Short
#  0 = Neutral
IPredictionResult = Literal[1, -1, 0]





# Prediction Meta Data
# This is the data that was used by the interpreter to come up with a result.
# The only parameter that is required is the description (d) which should always
# follow the pattern 'long-*' or 'short-*'. The other properties will only be 
# present if cache is disabled.
class IPredictionMetaData(TypedDict):
    # Interpretation Description
    d: str

    # List of predictions generated by Arima. Only present in ArimaModel Predictions.
    pl: Union[List[float], None]

    # List of normalized predictions generated by a RegressionModel. Only present in
    # RegressionModel Predictions.
    npl: Union[List[float], None]

    # Features: ArimaModel|RegressionModel prediction results and/or technical analysis data. 
    # Only present in ClassificationModel Predictions.
    f: Union[List[int], None]

    # Up Probability. Only present in ClassificationModel Predictions.
    up: Union[float, None]

    # Down Probability. Only present in ClassificationModel Predictions.
    dp: Union[float, None]









# Prediction
# The final prediction dict generated by the model. It contains the result, the time
# in which the prediction was made and the metadata.
# For ArimaModels, RegressionModels and ClassificationModels, the md list will always contain one element.
# On the other side, MultiClassificationModels contain as many metadata elements as ClassificationModels
# and they also have identical indexing.
class IPrediction(TypedDict):
    # Prediction result: -1 | 0 | 1
    r: IPredictionResult

    # The time in which the prediction was performed (milliseconds)
    t: int

    # Prediction metadata: An ArimaModel|RegressionModel|ClassificationModel will always output a single 
    # IPredictionMetaData whereas, MultiClassificationModels will output any number of IPredictionMetaData 
    # dictionaries according to the number of ClassificationModels within it.
    md: List[IPredictionMetaData]









## Keras Models Configurations ##



# Regresion Configuration
# The configuration that was used to train and will predict based on.
class IRegressionConfig(TypedDict):
    # The identifier of the model
    id: str

    # Important information regarding the trained model
    description: str

    # Regression Model Type
    # Default: will generate all predictions in one go.
    # Autoregressive: will generate 1 prediction at a time and feed it to itself as an input 
    autoregressive: bool

    # The number of candlesticks it will lookback to make a prediction
    lookback: int

    # The number of predictions it will generate
    predictions: int

    # The summary of the KerasModel
    summary: IKerasModelSummary




# Classification Configuration
# The configuration that was used to train and will predict based on.
class IClassificationConfig(TypedDict):
    # The identifier of the model
    id: str

    # Important information regarding the trained model
    description: str

    # The identifier of the training data used
    training_data_id: str

    # The list of ArimaModel|RegressionModel attached to the classification
    models: List[Dict] # IModel does not exist yet

    # Optional Technical Analysis Features
    include_rsi: bool       # Momentum
    include_stoch: bool     # Momentum
    include_aroon: bool     # Trend
    include_stc: bool       # Trend
    include_mfi: bool       # Volume

    # The total number of features that will be used by the model to predict
    features_num: int

    # The summary of the KerasModel
    summary: IKerasModelSummary





## Model Types ##


# Types of models supported by the project
IModelType = Literal[
    "ArimaModel",               # A
    "RegressionModel",          # R_
    "ClassificationModel",      # C_
    "XGBRegressionModel",       # XGBR_
    "XGBClassificationModel",   # XGBC_
    "ConsensusModel"            # CON_
]


# Trainable Model Types
ITrainableModelType = Literal[
    "keras_regression",     # RegressionModel
    "keras_classification", # ClassificationModel
    "xgb_regression",       # XGBRegressionModel
    "xgb_classification"    # XGBClassificationModel
]


# Model ID Prefix
IModelIDPrefix = Literal[
    "A",       # ArimaModel
    "R_",      # RegressionModel
    "C_",      # ClassificationModel
    "XGBR_",   # XGBRegressionModel
    "XGBC_",   # XGBClassificationModel
    "CON_",    # ConsensusModel
]








## Model Configurations ##




# ArimaModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IArimaModelConfig(TypedDict):
    # The number of prediction candlesticks that will look into the past in order to make a prediction.
    lookback: int

    # The number of predictions to be generated by Arima
    predictions: int

    # Parameters for ARIMA(p,d,q)(P,D,Q)m
    arima: IArimaConfig

    # The interpreter that will determine the prediction's result
    interpreter: IPercentChangeInterpreterConfig






# RegressionModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IRegressionModelConfig(TypedDict):
    # The ID of the saved keras regression model
    regression_id: str

    # The entire configuration used by the regression. This value is only present
    # when the function get_model is used.
    regression: Union[IRegressionConfig, None]

    # The interpreter that will determine the prediction's result
    interpreter: IPercentChangeInterpreterConfig






# ClassificationModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IClassificationModelConfig(TypedDict):
    # The ID of the saved keras classification model
    classification_id: str

    # The entire configuration used by the classification. This value is only present
    # when the function get_model is used.
    classification: Union[IClassificationConfig, None]

    # The interpreter that will determine the prediction's result
    interpreter: IProbabilityInterpreterConfig





# ConsensusModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IConsensusModelConfig(TypedDict):
    # The list of ArimaModel|RegressionModel|ClassificationModel attached to the ConsensusModel.
    # This value is only populated when get_model is invoked
    sub_models: Union[List[Dict], None] # IModel does not exist yet.

    # The interpreter that will determine the prediction's result
    interpreter: IConsensusInterpreterConfig










## Model ##



# Model
# The final state of an ArimaModel, RegressionModel, ClassificationModel or ConsensusModel once an 
# instance is initialized.
# The type of a model can be determined based on its configuration. Existing models are:
# 1) ArimaModel: a model with a single ArimaModel.
# 2) RegressionModel: a model with a single RegressionModel.
# 3) ClassificationModel: a model with a minimum of 5 ArimaModels|RegressionModels embedded in the
#       Training Data as well as a single ClassificationModel Config.
# 4) ConsensusModel: a model that can contain any number (>= 2) of models except for itself as well as a 
#       single ConsensusModelConfig.
class IModel(TypedDict):
    # Identity of the Model. If it is an ArimaModel, it must follow the guidelines.
    id: str

    # ArimaModels' Configurations
    arima_models: Union[List[IArimaModelConfig], None]

    # RegressionModels' Configurations
    regression_models: Union[List[IRegressionModelConfig], None]

    # ClassificationModels' Configurations
    classification_models: Union[List[IClassificationModelConfig], None]

    # ConsensusModel's Configuration
    consensus_model: Union[IConsensusModelConfig, None]























