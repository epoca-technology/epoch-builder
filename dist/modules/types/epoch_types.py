from typing import TypedDict, Union, Literal, Dict




## File Paths ##


# Configuration Files' Paths
# The Paths for all the configuration files that are used as input for many of the modules.
class IConfigPath(TypedDict):
    # Epoch's Configuration
    epoch: str

    # Backtest's Configuration
    backtest: str

    # Classification Training Data's Configuration
    classification_training_data: str

    # Keras Models Training's Configuration - These configurations are generated by Hyperparams
    keras_classification_training: str
    keras_regression_training: str

    # XGBoost Models Training's Configuration - These configurations are generated by Hyperparams
    xgb_classification_training: str
    xgb_regression_training: str





# Backtest Assets' Paths
# The paths for all the directories within the backtest_assets directory which are used
# to read and write results.
class IBacktestAssetsPath(TypedDict):
    # Backtest Assets Root Directory
    assets: str

    # Backtest Configurations grouped by position exit combination
    configurations: str

    # Backtest Results grouped by position exit combination
    results: str

    # Regression Selection Results
    regression_selection: str




# Model Assets' Paths
# The paths for all the directories within the model_assets directory.
class IModelAssetsPath(TypedDict):
    # Model Assets Root Directory
    assets: str

    # Batched training certificates grouped by trainable model type
    batched_training_certificates: str

    # Classification Training Data Files
    classification_training_data: str

    # Configurations to generate Classification Training Data Files
    classification_training_data_configs: str

    # Trained Models that can be used by the Software. Models that won't be exported
    # in the epoch should not be kept in this directory.
    models: str

    # All the models trained during the Epoch should be kept in this directory, grouped
    # by trainable model type.
    models_bank: str

    # Configurations generated by Hyperparams in order to train KerasClassification Models
    keras_classification_training_configs: str

    # Configurations generated by Hyperparams in order to train KerasRegression Models
    keras_regression_training_configs: str

    # Configurations generated by Hyperparams in order to train XGBClassification Models
    xgb_classification_training_configs: str

    # Configurations generated by Hyperparams in order to train XGBRegression Models
    xgb_regression_training_configs: str









## Position Exit Combinations ##




# Identifiers
IPositionExitCombinationID = Literal[
    "TP10_SL10", "TP10_SL15", "TP15_SL10", "TP15_SL15", "TP20_SL10", "TP20_SL15", 
    "TP10_SL20", "TP15_SL20", "TP20_SL20", "TP20_SL25", "TP25_SL20", "TP25_SL25",
    "TP25_SL30", "TP30_SL25", "TP20_SL30", "TP30_SL20", "TP30_SL30", "TP30_SL35",
    "TP35_SL30", "TP35_SL35", "TP35_SL40", "TP40_SL35", "TP30_SL40", "TP40_SL30",
    "TP40_SL40"
]


# Paths
IPositionExitCombinationPath = Literal[
    "01_TP10_SL10", "02_TP10_SL15", "03_TP15_SL10", "04_TP15_SL15", "05_TP20_SL10", "06_TP20_SL15", 
    "07_TP10_SL20", "08_TP15_SL20", "09_TP20_SL20", "10_TP20_SL25", "11_TP25_SL20", "12_TP25_SL25",
    "13_TP25_SL30", "14_TP30_SL25", "15_TP20_SL30", "16_TP30_SL20", "17_TP30_SL30", "18_TP30_SL35",
    "19_TP35_SL30", "20_TP35_SL35", "21_TP35_SL40", "22_TP40_SL35", "23_TP30_SL40", "24_TP40_SL30",
    "25_TP40_SL40"
]


# Position Exit Combination Record
class IPositionExitCombinationRecord(TypedDict):
    take_profit: float
    stop_loss: float
    path: IPositionExitCombinationPath


# Database containing all combination records
IPositionExitCombinationDatabase = Dict[IPositionExitCombinationID, IPositionExitCombinationRecord]









## Configuration ##



# Epoch Config
# The configuration to be used by the Epoch and influence the entire infrastructure.
class IEpochConfig(TypedDict):
    # Random seed to be set on all required libraries in order to guarantee reproducibility
    seed: int

    # Identifier, must be preffixed with "_". For example: "_EPOCHNAME"
    id: str

    # The range of the Epoch and is used to calculate the backtest and training ranges
    start: int
    end: int

    # The range that will be used to backtest all the models (epoch_width * 0.5)
    backtest_start: int
    backtest_end: int

    # The range that will be used to train the Keras & XGBoost Models (epoch_width * 1.5)
    training_start: int
    training_end: int

    # Price Change Requirement
    # This value is used to evaluate Keras & XGB Regression Models. When creating an Epoch or 
    # training a regression, the best position exit combination is unknown and therefore it 
    # may require permanent adjustments.
    # At the time of coding this module, after having completed the Arima Backtests in the _ALPHA
    # Epoch, the Regression Selection Results pointing to TP30_SL30 as the best combination.
    price_change_requirement: float

    # The number of minutes the model will remain idle when a position is closed during backtests
    idle_minutes_on_position_close: int

    # The identifier of the classification training data for unit tests
    ut_class_training_data_id: Union[str, None]

    # The Position Exit Combination that came victorious in the Regression Selection Process
    take_profit: Union[float, None]
    stop_loss: Union[float, None]





# Default values to speed up the creation process
class IEpochDefaults(TypedDict):
    epoch_width: int
    seed: int
    price_change_requirement: int
    idle_minutes_on_position_close: int
