from typing import Union, List, Dict
from modules._types import IDatabaseTableName
from modules.database.Database import Database




class FeatureCache:
    """FeatureCache Class

    This class stores features generated by regression models in the database.

    Instance Properties:
        model_id: str
            The ID of the model that initialized the instance.
        table_name: IDatabaseTableName
            The name of the table in which the values will be stored.
    """




    def __init__(self, model_id: str):
        """Initializes the feature cache instance for regressions.

        Args:
            model_id: str
                The ID of the model that initialized the instance.
        """
        # Init the ID
        self.model_id: str = model_id

        # Init the table name
        self.table_name: IDatabaseTableName = Database.tn("features")








    def get(self, first_ot: int, last_ct: int) -> Union[float, None]:
        """Retrieves a feature. Returns None in case it doesn't exist.
        Make sure to always save features if they don't exist.

        Args:
            first_ot: int
            last_ct: int
                The prediction lookback range.

        Returns:
            Union[float, None]
        """
        # Retrieve the feature if any
        snap: List[Dict[str, float]] = Database.read_query(
            f"\
                SELECT f FROM {self.table_name} WHERE \
                id = %s AND fot = %s AND lct = %s \
                LIMIT 1\
            ",
            (self.model_id, first_ot, last_ct)
        )

        # Return the prediction if any
        return snap[0]["f"] if len(snap) > 0 else None







    def save(self, first_ot: int, last_ct: int, feature: float) -> None:
        """Saves a Regression Feature in the Database.

        Args:
            first_ot: int
                The open time of the first lookback candlestick.
            last_ct: int
                The close time of the last lookback candlestick.
            feature: float
                The feature to be stored in the db.
        """
        Database.write_query(
            f"\
                INSERT INTO {self.table_name}(id, fot, lct, f) \
                VALUES (%s, %s, %s, %s)\
            ",
            (self.model_id, first_ot, last_ct, feature)
        )








    def delete(self, first_ot: int, last_ct: int) -> None:
        """Deletes a feature from the db. This functionality is only to be used on unit tests.

        Args:
            first_ot: int
                The open time of the first lookback candlestick.
            last_ct: int
                The close time of the last lookback candlestick.
        """
        Database.write_query(
            f"\
                DELETE FROM {self.table_name} WHERE \
                id = %s AND fot = %s AND lct = %s \
            ",
            (self.model_id, first_ot, last_ct)
        )