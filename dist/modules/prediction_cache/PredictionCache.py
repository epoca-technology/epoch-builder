from typing import Union, List, Dict
from modules._types import IPrediction, IDatabaseTableName
from modules.database.Database import Database




class PredictionCache:
    """PredictionCache Class

    This class stores predictions generated by any model in the database.

    Instance Properties:
        model_id: str
            The ID of the model that initialized the instance.
        table_name: IDatabaseTableName
            The name of the table in which the values will be stored.
    """


    def __init__(self, model_id: str):
        """Initializes the prediction cache instance.

        Args:
            model_id: str
                The ID of the model that initialized the instance.
        """
        # Init the ID
        self.model_id: str = model_id

        # Init the table name
        self.table_name: IDatabaseTableName = Database.tn("predictions")








    def get(self, first_ot: int, last_ct: int) -> Union[IPrediction, None]:
        """Retrieves a prediction. Returns None in case it doesn't exist.
        Make sure to always save predictions if they don't exist.

        Args:
            first_ot: int
            last_ct: int
                The prediction lookback range.

        Returns:
            Union[IPrediction, None]
        """
        # Retrieve the prediction if any
        snap: List[Dict[str, IPrediction]] = Database.read_query(
            f"\
                SELECT p FROM {self.table_name} WHERE \
                id = %s AND fot = %s AND lct = %s \
                LIMIT 1\
            ",
            (self.model_id, first_ot, last_ct)
        )

        # Return the prediction if any
        return snap[0]["p"] if len(snap) > 0 else None







    def save(self, first_ot: int, last_ct: int, pred: IPrediction) -> None:
        """Saves a Regression Prediction in the Database.

        Args:
            first_ot: int
                The open time of the first lookback candlestick.
            last_ct: int
                The close time of the last lookback candlestick.
            pred: IPrediction
                The prediction to be stored in the db.
        """
        Database.write_query(
            f"\
                INSERT INTO {self.table_name}(id, fot, lct, p) \
                VALUES (%s, %s, %s, %s)\
            ",
            (self.model_id, first_ot, last_ct, pred)
        )








    def delete(self, first_ot: int, last_ct: int) -> None:
        """Deletes a prediction from the db. This functionality is only to be used on unit tests.

        Args:
            first_ot: int
                The open time of the first lookback candlestick.
            last_ct: int
                The close time of the last lookback candlestick.
        """
        Database.write_query(
            f"\
                DELETE FROM {self.table_name} WHERE \
                id = %s AND fot = %s AND lct = %s \
            ",
            (self.model_id, first_ot, last_ct)
        )