from typing import List, Tuple
from modules._types import IPercentChangeInterpreterConfig, IPredictionResult, InterpreterInterface
from modules.utils.Utils import Utils




class PercentageChangeInterpreter(InterpreterInterface):
    """PercentageChangeInterpreter Class

    This class takes a list of prices (can be normalized) that include the current price
    as well as the predicted list and interprets its values based on the percentage change from
    the first item to the last.

    Class Properties:
        MIN_INCREASE_CHANGE_VALUE
        MAX_INCREASE_CHANGE_VALUE
        MIN_DECREASE_CHANGE_VALUE
        MAX_DECREASE_CHANGE_VALUE
            The min and max values that can be accepted by the interpreter.

    Instance Properties:
        min_increase_change: float
            The percentage change that will be used in order to predict a long position. Changes under this
            value will be considered neutral.
        min_decrease_change: float
            The percentage change that will be used in order to predict a short position. Changes above this 
            value will be considered neutral.
            IMPORTANT: Keep in mind this value must be a negative number.
    """
    # Min and max increase change requirements
    MIN_INCREASE_CHANGE_VALUE: float = 1
    MAX_INCREASE_CHANGE_VALUE: float = 4

    # Min and max decrease change requirements
    MIN_DECREASE_CHANGE_VALUE: float = -4
    MAX_DECREASE_CHANGE_VALUE: float = -1
  




    def __init__(self, config: IPercentChangeInterpreterConfig):
        """Initializes the Interpreter Class based on the provided configuration.

        Args:
            config: IPercentChangeInterpreterConfig
                The configuration to interpret predictions.

        Raises:
            ValueError:
                If the provided increase/decrease requirements are invalid.
        """
        # Validate the increase change requirement
        if not isinstance(config.get("min_increase_change"), (int, float)) or \
            config["min_increase_change"] < PercentageChangeInterpreter.MIN_INCREASE_CHANGE_VALUE or\
            config["min_increase_change"] > PercentageChangeInterpreter.MAX_INCREASE_CHANGE_VALUE:
            raise ValueError(f"The provided min_increase_change is invalid: {config['min_increase_change']}")

        # Validate the decrease change requirement
        if not isinstance(config.get("min_decrease_change"), (int, float)) or \
            config["min_decrease_change"] < PercentageChangeInterpreter.MIN_DECREASE_CHANGE_VALUE or\
            config["min_decrease_change"] > PercentageChangeInterpreter.MAX_DECREASE_CHANGE_VALUE:
            raise ValueError(f"The provided min_decrease_change is invalid: {config['min_decrease_change']}")

        # Initialize the instance properties
        self.min_increase_change: float = config["min_increase_change"]
        self.min_decrease_change: float = config["min_decrease_change"]









 



    def interpret(self, predictions: List[float]) -> Tuple[IPredictionResult, str]:
        """Given a list of predictions, it will calculate the change between the 
        first and the last. Based on this result and the config values provided will
        determine a result.
         1  =   Long
         0  =   Neutral
        -1  =   Short

        Args:
            predictions: List[float]
                The list of predictions generated by a Regression. IMPORTANT: The 
                provided list must contain the current price and the predictions 
                generated by the Regression.

        Returns:
            Tuple[IPredictionResult, str] 
            (1|0|-1, 'long'|'neutral'|'short')
        """
        # Calculate the percentual change between the first and the last prediction
        change: float = Utils.get_percentage_change(predictions[0], predictions[-1])
        
        # Return the packed results accordingly
        if change >= self.min_increase_change:
            return 1, "long"
        elif change <= self.min_decrease_change:
            return -1, "short"
        else:
            return 0, "neutral"







        






    def get_config(self) -> IPercentChangeInterpreterConfig:
        """Returns the interpreter's data after having been initialized.

        Returns:
            IPercentChangeInterpreterConfig
        """
        return { 
            "min_increase_change": self.min_increase_change, 
            "min_decrease_change": self.min_decrease_change 
        }