from typing import List, TypedDict, Tuple, Dict, Literal
from numpy import ndarray
from modules._types.keras_utils_types import IKerasModelConfig, IKerasModelTrainingHistory, IKerasOptimizer, \
    IKerasLoss, IKerasMetric, IKerasOptimizerName, IKerasModelSummary, IKerasModelTemplateName
from modules._types.discovery_types import IDiscovery, IDiscoveryPayload






###################
## Training Data ##
###################




# Datasets to train and test a Regression
# (train_x, train_y, test_x, test_y)
IRegressionDatasets = Tuple[ndarray, ndarray, ndarray, ndarray]




# Regression Dataset Summary
# This summary is extracted directly from the Dataset
class IRegressionDatasetSummary(TypedDict):
    count: float
    mean: float
    std: float
    min: float
    #"25%": float
    #"50%": float
    #"75%": float
    max: float















############################
## Training Configuration ##
############################




# Regression Training Configuration
# The configuration that will be used to initialize, train and save the model.
class IRegressionTrainingConfig(TypedDict):
    # The ID of the model.
    id: str

    # Any relevant data that should be attached to the trained model.
    description: str

    # The number of prediction candlesticks that will look into the past in order to make a prediction.
    lookback: int

    # The number of predictions to be generated
    predictions: int

    # The learning rate that will be used to train the model. If the value is equals to -1, the system will
    # use the InverseTimeDecay Class.
    learning_rate: float

    # The optimizer to be used.
    optimizer: IKerasOptimizer

    # The loss function to be used
    loss: IKerasLoss

    # The metric function to be used
    metric: IKerasMetric

    # Keras Model Configuration
    keras_model: IKerasModelConfig








# Regression Training Config Batch
# Models and created and evaluated in batches. Moreover, multiple batches can be combined
# in the GUI or can be viewed independently.
class IRegressionTrainingConfigBatch(TypedDict):
    # Descriptive name to easily identify the batch. Must be compatible with filesystems.
    name: str

    # The configurations for the models that will be trained within the batch.
    configs: List[IRegressionTrainingConfig]








######################################
## Training Configuration Generator ##
######################################




# Categories (directories) that hold the regression training configs within
IRegressionTrainingConfigCategory = Literal["UNIT_TEST", "DNN", "CDNN", "LSTM", "CLSTM"]



# Variations per network
IRegressionTrainingConfigNetworks = Dict[IKerasModelTemplateName, List[IKerasModelConfig]]


# Variations by network
class IRegressionTrainingConfigNetworksByCategory(TypedDict):
    DNN: IRegressionTrainingConfigNetworks
    CDNN: IRegressionTrainingConfigNetworks
    LSTM: IRegressionTrainingConfigNetworks
    CLSTM: IRegressionTrainingConfigNetworks



# Losses and metric combinations to be used
class IRegressionTrainingConfigLoss(TypedDict):
    name: IKerasLoss
    metric: IKerasMetric




# Regression Training Configs Receipt
# Once all configs have been saved, a receipt is generated in order to
# summarize the models that will be trained.


# Network Receipt
class IRegressionTrainingConfigNetworkReceipt(TypedDict):
    name: str
    models: int
    batches: int



# Receipt
class IRegressionTrainingConfigReceipt(TypedDict):
    creation: str
    batch_size: int
    output_name: str
    total_models: int
    networks: List[IRegressionTrainingConfigNetworkReceipt]













###################
## Configuration ##
###################



# Regresion Configuration
# The configuration generated by the model when invoking get_config. This configuration
# can also be used to initialize a Regression Instance.
class IRegressionConfig(TypedDict):
    # The identifier of the model
    id: str

    # Important information regarding the model
    description: str

    # The number of candlesticks it will lookback to make a prediction
    lookback: int

    # The number of predictions it will generate
    predictions: int

    # The discovery performed prior to saving the model
    discovery: IDiscovery

    # The summary of the KerasModel
    summary: IKerasModelSummary











##########################
## Training Certificate ##
##########################





# Test Dataset Evaluation
# Once the training is completed, the error is calculated on the test dataset for both, the loss
# and the metric functions.
ITestDatasetEvaluation = Dict[IKerasLoss, float]






# Regression Training Certificate
# Once the training the discovery complete, a certificate containing all the
# data is saved and returned for batching.
class IRegressionTrainingCertificate(TypedDict):
    # Identification
    id: str
    description: str

    # Training Data Date Range
    training_data_start: int    # Open Time of the first prediction candlestick
    training_data_end: int      # Close Time of the last prediction candlestick

    # Training Data Dataset Sizes
    train_size: int     # Number of rows in the train dataset
    test_size: int      # Number of rows in the test dataset

    # Training Data Summary - Description extracted directly from the normalized dataframe
    training_data_summary: IRegressionDatasetSummary

    # Training Configuration
    learning_rate: float
    optimizer: IKerasOptimizerName
    loss: IKerasLoss
    metric: IKerasMetric
    keras_model_config: IKerasModelConfig

    # Training
    training_start: int     # Time in which the training started
    training_end: int       # Time in which the training ended

    # Training performance by epoch
    training_history: IKerasModelTrainingHistory

    # Result of the evaluation of the test dataset
    test_ds_evaluation: ITestDatasetEvaluation

    # Regression Discovery
    discovery: IDiscoveryPayload

    # The configuration of the Regression
    regression_config: IRegressionConfig





