from typing import TypedDict, List, Union, Literal





# Prediction Result
#  1 = Long
# -1 = Short
#  0 = Neutral
IPredictionResult = Literal[1, -1, 0]








# Prediction Meta Data
# This is the data that was used by the interpreter to come up with a result.
# The only parameter that is required is the description (d) which should always
# follow the pattern 'long-*',  'short-*' or 'neutral-*'. The other properties will 
# only be present if cache is disabled.
class IPredictionMetaData(TypedDict):
    # Interpretation Description
    d: str

    # List of predictions generated by a Regression as well as the price when it was generated.
    pl: Union[List[float], None]

    # Regression Features, Technical Analysis and any other data that could be included in the future.
    f: Union[List[int], None]

    # Up Probability. Only present in Classification Predictions.
    up: Union[float, None]

    # Down Probability. Only present in Classification Predictions.
    dp: Union[float, None]







# Prediction
# The final prediction dict generated by the model. It contains the result, the time
# in which the prediction was made and the metadata.
# For KerasRegressionModel, KerasClassificationModel, XGBRegressionModel and XGBClassification, the md list 
# will always contain one element. 
# On the other side, the ConsensusModel contains as many metadata elements as Classifications within. They 
# also have identical indexing.
class IPrediction(TypedDict):
    # Prediction result: -1 | 0 | 1
    r: IPredictionResult

    # The time in which the prediction was performed (milliseconds)
    t: int

    # Prediction Metadata
    md: List[IPredictionMetaData]