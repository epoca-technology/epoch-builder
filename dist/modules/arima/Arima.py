from typing import List
from pandas import Series
from numpy import around
from pmdarima import ARIMA
from modules.arima import IArimaConfig





class Arima:
    """Arima Class

    This class serves as a wrapper for Arima's functionality.

    Class Properties:
        ...

    Instance Properties:
        config: IArimaConfig
            The configuration that will be used to generate predictions.
        predictions: int
            The number of predictions to be generated by Arima.
    """



    def __init__(self, config: IArimaConfig, predictions: int):
        """Initializes the Arima Wrapper's Instance.
        """
        # Initialize the configuration
        self.config: IArimaConfig = self.build_arima_config(config)

        # Initialize the # of predictions
        self.predictions: int = predictions







    def build_arima_config(self, config: IArimaConfig) -> IArimaConfig:
        """Given a potentially incomplete Arima Configuration Dict, it will
        complete it and return it.

        Args:
            config: IArimaConfig
                The configuration that should be reviewed and completed.

        Returns:
            IArimaConfig
        """
        return {
            "p": config['p'],
            "d": config['d'],
            "q": config['q'],
            "P": config['P'] if isinstance(config.get('P'), int) else 0,
            "D": config['D'] if isinstance(config.get('D'), int) else 0,
            "Q": config['Q'] if isinstance(config.get('Q'), int) else 0,
            "m": config['m'] if isinstance(config.get('m'), int) else 0,
        }







    def predict(self, close_prices: Series) -> List[float]:
        """Given a series of close prices, it will build, train the model and
        finally, generate predictions. 

        Args:
            close_prices: Series
                The close prices that will be used to train the model.

        Returns:
            List[float]
        """
        # Initialize the Arima Model
        arima_model: ARIMA = ARIMA(
            order=(self.config['p'], self.config['d'], self.config['q']), 
            seasonal_order=(self.config['P'], self.config['D'], self.config['Q'], self.config['m']),
            suppress_warnings=True
        )

        # Train the model with the provided series
        arima_model.fit(close_prices)

        # Finally, generate the predictions
        return around(arima_model.predict(self.predictions), decimals=2).tolist()