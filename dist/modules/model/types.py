from typing import TypedDict, List, Union, Any
from modules.arima import IArimaConfig
from modules.interpreter import IPercentChangeInterpreterConfig, IProbabilityInterpreterConfig
from modules.regression import IRegressionConfig



## Predictions ##



# Prediction Meta Data
# This is the data that was used by the interpreter to come up with a result.
# The only parameter that is required is the description (d) which should always
# follow the pattern 'long-*' or 'short-*'. The other properties will only be 
# present if cache is disabled.
class IPredictionMetaData(TypedDict):
    # Interpretation Description
    d: str

    # List of predictions generated by Arima. Only present in ArimaModel Predictions.
    pl: Union[List[float], None]

    # List of normalized predictions generated by a RegressionModel. Only present in
    # RegressionModel Predictions.
    npl: Union[List[float], None]

    # ArimaModel|RegressionModel prediction results. Only present in ClassificationModel
    # Predictions.
    pr: Union[List[int], None]

    # Up Probability. Only present in ClassificationModel Predictions.
    up: Union[float, None]

    # Down Probability. Only present in ClassificationModel Predictions.
    dp: Union[float, None]




# Prediction
# The final prediction dict generated by the model. It contains the result, the time
# in which the prediction was made and the metadata.
# For ArimaModels, RegressionModels and ClassificationModels, the md list will always contain one element.
# On the other side, MultiClassificationModels contain as many metadata elements as ClassificationModels
# and they also have identical indexing.
class IPrediction(TypedDict):
    # Prediction result: -1 | 0 | 1
    r: int

    # The time in which the prediction was performed (milliseconds)
    t: int

    # Prediction metadata: An ArimaModel|RegressionModel|ClassificationModel will always output a single 
    # IPredictionMetaData whereas, MultiClassificationModels will output any number of IPredictionMetaData 
    # dictionaries according to the number of ClassificationModels within it.
    md: List[IPredictionMetaData]










## Model Configurations ##




# ArimaModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IArimaModelConfig(TypedDict):
    # The number of prediction candlesticks that will look into the past in order to make a prediction.
    lookback: int

    # The number of predictions to be generated by Arima
    predictions: int

    # Parameters for ARIMA(p,d,q)(P,D,Q)m
    arima: IArimaConfig

    # The interpreter that will determine the prediction's result
    interpreter: IPercentChangeInterpreterConfig






# RegressionModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IRegressionModelConfig(TypedDict):
    # The ID of the saved keras regression model
    regression_id: str

    # The interpreter that will determine the prediction's result
    interpreter: IPercentChangeInterpreterConfig

    # The entire configuration used by the regression. This value is only present
    # when the function get_model is used.
    regression: Union[IRegressionConfig, None]






# ClassificationModel Configuration
# The configuration that will be use to generate and interpret predictions.
class IClassificationModelConfig(TypedDict):
    # The ID of the saved keras classification model
    classification_id: str

    # The interpreter that will determine the prediction's result
    interpreter: IProbabilityInterpreterConfig

    # The entire configuration used by the classification. This value is only present
    # when the function get_model is used.
    classification: Union[Any, None]







## Model ##


# Model
# The final state of an ArimaModel, RegressionModel or ClassificationModel once an 
# instance is initialized.
# The type of a model can be determined based on its configuration. Existing models are:
# 1) ArimaModel: A model with a single ArimaModel.
# 2) RegressionModel: A model with a single RegressionModel.
# 3) ClassificationModel: A model with a minimum of 5 ArimaModels|RegressionModels as well as
# a single ClassificationModel Config.
class IModel(TypedDict):
    # Identity of the Model. If it is an ArimaModel, it must follow the guidelines.
    id: str

    # ArimaModels that will be used to predict accordingly based on the type of model.
    arima_models: Union[List[IArimaModelConfig], None]

    # RegressionModels that will be used to predict accordingly based on the type of model.
    regression_models: Union[List[IRegressionModelConfig], None]

    # ClassificationModels that will be used to predict accordingly based on the type of model.
    classification_models: Union[List[IClassificationModelConfig], None]







