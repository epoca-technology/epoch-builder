from typing import TypedDict, List, Union




## Interpreter ##




# Relative Strength Index Indicator (RSI)
# The RSI is a float that ranges 0-100. As the value gets closer to 100 means that the asset
# is entering an overbought state. On the other hand, as it gets closer to 0 indicates an 
# oversold state.
# If active, it will neutralize longs when the RSI >= overbought as well as shorts when the 
# RSI <= oversold.
# Overbought defaults to 80 and Oversold to 20 if none is provided
class IRSIConfig(TypedDict):
    active: bool
    overbought: Union[float, None]
    oversold: Union[float, None]




# Exponential Moving Average Indicator (EMA)
# The short and long EMAs indicator helps discover the current trend of the market. 
# If the short ema is above the long ema by distance% means the asset is currently on
# an uptrend. On the other hand, if the long ema is above the short ema by distance%
# means the market is on a downtrend.
# The distance property indicates the percentual change that must exist between the 
# short and the long EMA.
# If active, it will neutralize longs when the market is on a downtrend and shorts when
# it is on an uptrend. A trend will only be discovered if the percentual difference between 
# short & long EMA is greater than or equals to the distance provided.
# Distance defaults to 0.5
class IEMAConfig(TypedDict):
    active: bool
    distance: Union[float, None]




# Interpreter Configuration
# The configuration used in order to interpret the model's predictions based on the 
# percentual change from the first to the last prediction as well as a series of 
# indicators that can help understand the current market state.
class IInterpreterConfig(TypedDict):
    long: float
    short: float
    rsi: Union[IRSIConfig, None]
    ema: Union[IEMAConfig, None]













## Predictions ##



# Prediction Meta Data
# This is the data that was used by the interpreter to come up with a result.
# The only parameters that are required are the description (d) which should always
# follow the pattern 'long-*' or 'short-*' as well as the Predictions list (pl).
class IPredictionMetaData(TypedDict):
    # Interpretation Description
    d: str

    # List of predictions generated by Arima
    pl: List[float]    

    # RSI value at the time of the prediction
    rsi: Union[float, None]

    # Short & Long EMA values at the time of the prediction
    sema: Union[float, None]
    lema: Union[float, None]





# Prediction
# The final prediction dict generated by the model. It contains the result, the time
# in which the prediction was made and the metadata.
class IPrediction(TypedDict):
    # Prediction result: -1 | 0 | 1
    r: int

    # The time in which the prediction was performed (milliseconds)
    t: int

    # Prediction metadata: A SingleModel will always output a single IPredictionMetaData
    # whereas, MultiModels will output any number of IPredictionMetaData dictionaries
    md: List[IPredictionMetaData]










## Model ##



# Arima Config
# The configuration to be used on the Arima Instance to generate predictions.
class IArimaConfig(TypedDict):
    # The number of predictions to be generated by Arima
    predictions: int
    # p is the order (number of time lags) of the autoregressive model
    # d is the degree of differencing (the number of times the data have had past values subtracted)
    # q is the order of the moving-average model.
    p: int              
    d: int              
    q: int
    # P, D, Q refer to the autoregressive, differencing, and moving average terms for the 
    # seasonal part of the ARIMA model.
    P: Union[int, None]
    D: Union[int, None]
    Q: Union[int, None]
    # m refers to the number of periods in each season
    m: Union[int, None]




# SingleModel Configuration
class ISingleModelConfig(TypedDict):
    lookback: int
    arima: IArimaConfig
    interpreter: IInterpreterConfig




# Model
# This is final state of a Model or a MultiModel after having been initialized
class IModel(TypedDict):
    id: str                                 # The ID of the model.
    consensus: Union[int, None]             # Only present in MultiModels
    single_models: List[ISingleModelConfig] # The list of SingleModels
