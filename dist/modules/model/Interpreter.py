from typing import List, Tuple
from modules.utils import Utils
from modules.model import IInterpreterConfig




class Interpreter:
    """Interpreter Class

    This class takes care of processing a series of inputs and predictions. Based on the 
    provided configuration, it outputs a forecast value which will be used for trading.

    Class Properties:
        ...

    Instance Properties:
        long (float): 
            The percentage change that will be used in order to predict a long position. Changes under this
            value will be considered neutral.
        short (float): 
            The percentage change that will be used in order to predict a short position. Even though the 
            required positive is a positive number, it will be converted to negative in order to interpret
            the position. Changes above this value will be considered neutral.
    """



  

    def __init__(self, config: IInterpreterConfig):
        """Initializes the Interpreter Class based on the provided configuration.

        Args:
            config: IInterpreterConfig
                The configuration to interpret predictions.
        """
        # Initialize the instance properties
        self.long: float = config['long']
        self.short: float = config['short']









 



    def interpret(self, predictions: List[float]) -> Tuple[int, str]:
        """Given a list of predictions, it will calculate the change between the 
        first and the last. Based on this result and the config values provided will
        determine a result.
         1  =   Long
         0  =   Neutral
        -1  =   Short

        Args:
            predictions: List[float]
                The list of predictions generated by the Arima Model.

        Returns:
            Tuple[int, str] (1|0|-1, 'long'|'neutral'|'short')
        
        Raises:
            ValueError: 
                If the length of the predictions list is less than 5
        """
        # Make sure there are at least 5 items in the predictions list
        if len(predictions) < 5:
            raise ValueError(f"An interpretation requires a minimum of 5 predictions. Received {len(predictions)}")

        # Calculate the percentual change between the first and the last prediction
        change: float = Utils.get_percentage_change(predictions[0], predictions[-1])
        
        # Return the packed results accordingly
        if change >= self.long:
            return 1, 'long'
        elif change <= -(self.short):
            return -1, 'short'
        else:
            return 0, 'neutral'







        






    def get_interpreter(self) -> IInterpreterConfig:
        """Returns the interpreter's data after having been initialized.

        Returns:
            IInterpreter
        """
        return {'long': self.long,'short': self.short}