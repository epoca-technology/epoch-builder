from json import load
from modules.types import ITrainingDataConfig
from modules.classification.ClassificationTrainingData import ClassificationTrainingData


# TRAINING DATA CONFIGURATION FILE
# A TrainingData instance can generate the data that will be used to train the decision models.
#
# Identification:
#   id: The identification is generated by concatenating the ids of all the provided Arima Models.
# 
# Date Range:
#   start: The start date for the training data. It can be a string like '22/01/2021' or a timestamp
#       in milliseconds. If None is provided, it will use all the available data
#   end: The end date for the training data. It can be a string like '22/01/2021' or a timestamp
#       in milliseconds. If None is provided, it will use all the available data
#
# Positions:
#   up_percent_change: The percentage that the price needs to increase in order to close an up position.
#   down_percent_change: The percentage that the price needs to decrease in order to close a down position.
#   idle_minutes_on_position_close: The number of minutes the model will not trade for after closing a position.
# 
# Models:
#   models: The list of ArimaModel|RegressionModel Configurations that will be used to generate the data.
#
# TRAINING DATA PROCESS
# The Training Data Instance will create a trading simulation environment similar to the Backtest. However, 
# positions are not successful or unsuccessful, instead they determine wether the price has moved up or down.
# Once the test completes, the results will be placed on the /training_data directory.


# TRAINING DATA CONFIGURATION
# Opens and loads the configuration file that should be placed in the root of the project.
config_file = open('config/ClassificationTrainingData.json')
config: ITrainingDataConfig = load(config_file)


# TRAINING DATA INSTANCE
# The Instance of the Training Data that will be executed
training_data: ClassificationTrainingData = ClassificationTrainingData(config)


# TRAINING DATA EXECUTION
# Runs the Training Data for all models simultaneously. 
# Results as saved when the execution has completed. If the execution is interrupted before
# completion, results will not be saved.
print("TRAINING DATA RUNNING")
print(f"\n{training_data.id}:\n")
training_data.run()
print("\nTRAINING DATA COMPLETED")
